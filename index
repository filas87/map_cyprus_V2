<!DOCTYPE html>
<html lang="el">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Κύπρος – TK Finder</title>
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
  <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
  <script src="https://unpkg.com/@turf/turf@6.5.0/turf.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/xlsx@0.18.5/dist/xlsx.full.min.js"></script>
  <style>
    html,body{height:100%;margin:0}
    body{display:grid;grid-template-columns:minmax(320px,1fr) 480px;height:100%}
    #map{position:relative;height:100vh;min-height:320px;width:100%}
    #panel{border-left:1px solid #e5e7eb;font-family:system-ui,-apple-system,Segoe UI,Roboto,Helvetica,Arial,sans-serif;overflow:auto;padding:12px}
    h1{font-size:16px;margin:0 0 6px}
    small{color:#64748b}
    button{padding:8px 10px;border:0;border-radius:8px;background:#111827;color:#fff;font-weight:600;cursor:pointer}
    button.secondary{background:#e5e7eb;color:#111827}
    button+button{margin-left:8px}
    .row{display:flex;gap:8px;flex-wrap:wrap;align-items:center;margin:8px 0}
    .item{border-top:1px dashed #e5e7eb;padding:6px 0}
    .muted{color:#6b7280}
    .list{font-size:12px;color:#334155;max-height:160px;overflow:auto}
    .ok{background:#d1fae5;color:#065f46;border-radius:9999px;padding:2px 8px;margin-left:6px}
    .chips{display:flex;flex-wrap:wrap;gap:6px}
    .chip{background:#eef2ff;border:1px solid #c7d2fe;border-radius:9999px;padding:2px 8px;font-size:12px;color:#1e3a8a}
    .leaflet-tooltip{opacity:var(--tt-opacity,1)}
    .leaflet-tooltip.tk{box-shadow:0 2px 8px rgba(0,0,0,.15); border-width:1px; font-weight:600;}
    .mk{width:18px;height:18px;border-radius:50%;border:2px solid #111827;box-shadow:0 1px 4px rgba(0,0,0,.25);transform:translate(-9px,-9px)}
  </style>
</head>
<body>
  <div id="map"></div>
  <aside id="panel">
    <h1>Κύπρος – TK Finder <span class="ok" id="ver"></span></h1>
    <div id="status">Εκκίνηση…</div>
    <div class="row">
      <input id="searchInput" placeholder="ΤΚ 4 ψηφίων ή διεύθυνση" style="flex:1;padding:8px;border:1px solid #e5e7eb;border-radius:8px"/>
      <button id="searchBtn">Αναζήτηση</button>
      <button class="secondary" id="clearSearchBtn">Καθαρισμός</button>
    </div>
    <div id="searchResults" class="list"></div>
    <div class="row">
      <button id="addMarkerBtn">Προσθήκη Marker</button>
      <button class="secondary" id="reassignBtn">Ανακατανομή</button>
      <button class="secondary" id="toggleLabelsBtn">Labels TK</button>
      <button class="secondary" id="fitBtn">Fit TK</button>
      <button class="secondary" id="exportCsvBtn">CSV</button>
      <button class="secondary" id="exportXlsxBtn">Excel</button>
    </div>
    <div class="row" style="align-items:flex-end">
      <div style="display:flex;flex-direction:column;gap:4px">
        <label for="radiusKm" class="muted" style="font-size:12px">Ακτίνα ανάθεσης (km)</label>
        <input id="radiusKm" type="number" min="0" step="0.1" placeholder="0 = χωρίς όριο" style="width:160px;padding:8px;border:1px solid #e5e7eb;border-radius:8px"/>
      </div>
      <button class="secondary" id="applyRadiusBtn">Εφαρμογή</button>
      <button class="secondary" id="clearRadiusBtn">Χωρίς όριο</button>
      <button class="secondary" id="toggleRingsBtn">Κύκλοι κάλυψης</button>
    </div>
    <div class="row" style="align-items:flex-end">
      <div style="display:flex;flex-direction:column;gap:4px">
        <label for="labelAlpha" class="muted" style="font-size:12px">Διαφάνεια labels</label>
        <input id="labelAlpha" type="range" min="0" max="1" step="0.05" value="1" style="width:160px"/>
      </div>
      <span class="muted" id="labelAlphaVal">100%</span>
    </div>
    <div class="row">
      <input type="file" id="fileInput" accept=".geojson,.json,.csv,.txt" style="display:none"/>
      <button class="secondary" id="importBtn">Εισαγωγή επίσημου GeoJSON/CSV</button>
      <button class="secondary" id="clearCacheBtn">Καθαρισμός cache</button>
    </div>
    <div class="row">
      <button class="secondary" id="pasteListBtn">Εισαγωγή λίστας ΤΚ (χωρίς συντετ.)</button>
    </div>
    <div class="row" id="pasteBox" style="display:none;flex-direction:column;gap:6px">
      <textarea id="pasteArea" placeholder="Επικόλλησε εδώ ΤΚ (π.χ. 1010,1011 ή ένας ανά γραμμή)" style="width:100%;height:110px;padding:8px;border:1px solid #e5e7eb;border-radius:8px"></textarea>
      <div>
        <button id="geocodeListBtn">Γεωκωδικοποίηση λίστας</button>
        <small class="muted">Χρησιμοποιεί Nominatim (σειριακά) & αποθήκευση σε cache.</small>
      </div>
    </div>
    <div class="row" style="border-top:1px dashed #e5e7eb;padding-top:8px">
      <strong>GitHub Cloud Save</strong>
    </div>
    <div class="row" style="gap:6px">
      <input id="ghOwner" placeholder="owner" style="width:120px;padding:8px;border:1px solid #e5e7eb;border-radius:8px"/>
      <input id="ghRepo" placeholder="repo" style="width:140px;padding:8px;border:1px solid #e5e7eb;border-radius:8px"/>
      <input id="ghBranch" placeholder="branch (π.χ. main)" style="width:140px;padding:8px;border:1px solid #e5e7eb;border-radius:8px"/>
    </div>
    <div class="row" style="gap:6px">
      <input id="ghPath" placeholder="path (state.json)" value="state.json" style="flex:1;padding:8px;border:1px solid #e5e7eb;border-radius:8px"/>
    </div>
    <div class="row" style="gap:6px">
      <input id="ghToken" type="password" placeholder="GitHub Token (repo:contents)" style="flex:1;padding:8px;border:1px solid #e5e7eb;border-radius:8px"/>
      <button id="ghSaveBtn">GitHub Save</button>
      <button class="secondary" id="ghLoadBtn">GitHub Load</button>
    </div>
    <div class="row" style="border-top:1px dashed #e5e7eb;padding-top:8px">
      <strong>Γρήγορη διόρθωση ΤΚ</strong>
    </div>
    <div class="row" id="quickEditRow" style="gap:6px;align-items:flex-start">
      <input id="qePostcode" placeholder="ΤΚ (4 ψηφία)" style="width:90px;padding:8px;border:1px solid #e5e7eb;border-radius:8px"/>
      <input id="qeLat" placeholder="lat" style="width:120px;padding:8px;border:1px solid #e5e7eb;border-radius:8px"/>
      <input id="qeLon" placeholder="lon" style="width:120px;padding:8px;border:1px solid #e5e7eb;border-radius:8px"/>
      <button class="secondary" id="qePick">Pick από χάρτη</button>
      <button id="qeApply">Ενημέρωση ΤΚ</button>
    </div>
    <div class="row">
      <button class="secondary" id="saveStateBtn">Αποθήκευση κατάστασης (JSON)</button>
      <button class="secondary" id="loadStateBtn">Φόρτωση κατάστασης</button>
    </div>
    <div class="item">
      <div class="muted">Markers</div>
      <div id="markers"></div>
    </div>
    <div class="item">
      <div class="muted">Σύνοψη</div>
      <div id="summary"></div>
    </div>
    <div class="item">
      <div class="muted">Εκτός ακτίνας</div>
      <div id="unassigned" class="chips"></div>
    </div>
  </aside>
<script>
// —— Σταθερές / Εκκίνηση ——
const APP_VERSION = 'v2.20.3';
const KM = 1000;
const PALETTE = ['#e11d48','#7c3aed','#2563eb','#059669','#f59e0b','#dc2626','#14b8a6','#0ea5e9','#a855f7','#84cc16','#ef4444','#06b6d4','#f97316','#22c55e'];

document.getElementById('ver').textContent = APP_VERSION;
const map = L.map('map').setView([35.1667,33.3667],10);
L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',{attribution:'© OpenStreetMap',maxZoom:19}).addTo(map);
const statusDiv = document.getElementById('status');
const addMarkerBtn = document.getElementById('addMarkerBtn');
const reassignBtn = document.getElementById('reassignBtn');
const exportCsvBtn = document.getElementById('exportCsvBtn');
const exportXlsxBtn = document.getElementById('exportXlsxBtn');
const toggleLabelsBtn = document.getElementById('toggleLabelsBtn');
const fitBtn = document.getElementById('fitBtn');
const searchInput = document.getElementById('searchInput');
const searchBtn = document.getElementById('searchBtn');
const clearSearchBtn = document.getElementById('clearSearchBtn');
const searchResults = document.getElementById('searchResults');
const markersDiv = document.getElementById('markers');
const summaryDiv = document.getElementById('summary');
const unassignedDiv = document.getElementById('unassigned');
const importBtn = document.getElementById('importBtn');
const clearCacheBtn = document.getElementById('clearCacheBtn');
const fileInput = document.getElementById('fileInput');
const pasteListBtn = document.getElementById('pasteListBtn');
const pasteBox = document.getElementById('pasteBox');
const pasteArea = document.getElementById('pasteArea');
const geocodeListBtn = document.getElementById('geocodeListBtn');
const qePostcode = document.getElementById('qePostcode');
const qeLat = document.getElementById('qeLat');
const qeLon = document.getElementById('qeLon');
const qePick = document.getElementById('qePick');
const qeApply = document.getElementById('qeApply');
const saveStateBtn = document.getElementById('saveStateBtn');
const loadStateBtn = document.getElementById('loadStateBtn');
const ghOwner = document.getElementById('ghOwner');
const ghRepo = document.getElementById('ghRepo');
const ghBranch = document.getElementById('ghBranch');
const ghPath = document.getElementById('ghPath');
const ghToken = document.getElementById('ghToken');
const ghSaveBtn = document.getElementById('ghSaveBtn');
const ghLoadBtn = document.getElementById('ghLoadBtn');
const radiusInput = document.getElementById('radiusKm');
const applyRadiusBtn = document.getElementById('applyRadiusBtn');
const clearRadiusBtn = document.getElementById('clearRadiusBtn');
const toggleRingsBtn = document.getElementById('toggleRingsBtn');
const labelAlpha = document.getElementById('labelAlpha');
const labelAlphaVal = document.getElementById('labelAlphaVal');
let labelAlphaFactor = 1; // 0..1 – διαφάνεια φόντου tooltips πάνω στο χάρτη

let labelsVisible = true;
const tkLayer = L.geoJSON(null, {
  pointToLayer: function(f, latlng){
    return L.circleMarker(latlng, {
      radius: 3,
      weight: 1,
      color: '#94a3b8',
      fillColor: '#cbd5e1',
      fillOpacity: 0.7
    }).bindTooltip('ΤΚ ' + String(f.properties.postcode), {
      permanent: labelsVisible,
      offset: [8,0],
      direction: 'right'
    });
  }
}).addTo(map);
const searchLayer = L.layerGroup().addTo(map);
const markersLayer = L.layerGroup().addTo(map);
const ringsLayer = L.layerGroup().addTo(map);
let tkIndex = new Map();
let registry = [];
let nextId = 1;
let addMode = false;
let assignmentRadiusKm = 0; // 0 = χωρίς όριο
let showRings = false;

// —— Βοηθητικά ——
function setLabels(v){
  labelsVisible = v;
  tkLayer.eachLayer(function(l){
    v ? l.openTooltip() : l.closeTooltip();
    if(v){ styleTooltip(l, l._tkCol || null); }
  });
}
function csvEscape(v){ const s = String(v == null ? '' : v); return /[",\n]/.test(s) ? '"' + s.replace(/"/g,'""') + '"' : s; }
function stripBOM(s){ if(typeof s !== 'string') return s; return s.replace(/^\ufeff/, ''); }
function radiusOk(distanceMeters){ return assignmentRadiusKm <= 0 || distanceMeters <= assignmentRadiusKm*KM; }
function markerColorByIdx(idx){ return PALETTE[idx % PALETTE.length]; }
function markerIdxById(id){ return registry.findIndex(function(x){return x.id===id}); }
function markerColorById(id){ var i=markerIdxById(id); return i>=0?markerColorByIdx(i):'#111827'; }
function buildDivIcon(color){ return L.divIcon({className:'', html:'<div class="mk" style="background:'+color+'"></div>', iconSize:[18,18], iconAnchor:[9,9]}); }
function refreshMarkerIcons(){
  registry.forEach(function(r,i){
    var col=markerColorByIdx(i);
    r.m.setIcon(buildDivIcon(col));
    if(r.tooltip){
      var el = r.tooltip.getElement();
      if(el){ el.style.borderColor = col; el.style.background = rgba(col, 0.12*labelAlphaFactor); }
    }
  });
}
function refreshRings(){
  ringsLayer.clearLayers();
  if(!showRings||assignmentRadiusKm<=0) return;
  registry.forEach(function(r,i){
    var ll=r.m.getLatLng();
    var col=markerColorByIdx(i);
    L.circle(ll,{radius:assignmentRadiusKm*KM,weight:1,color:col,fillOpacity:0.05}).addTo(ringsLayer);
  });
}

// Χρώματα ως rgba για χρήση σε κάρτες/labels
function hexToRgb(hex){ var s=hex.replace('#',''); if(s.length===3){ s=s.split('').map(function(c){return c+c}).join(''); } var n=parseInt(s,16); return {r:(n>>16)&255,g:(n>>8)&255,b:n&255}; }
function rgba(hex,a){ var c=hexToRgb(hex); return 'rgba('+c.r+','+c.g+','+c.b+','+a+')'; }

function recolorPostcodes(assignedTo){
  tkLayer.eachLayer(function(l){
    var pc=String(l.feature.properties.postcode);
    var mkId=assignedTo.get(pc);
    if(mkId!=null){ var col=markerColorById(mkId); l.setStyle({color:col, fillColor:col, fillOpacity:0.75}); l._tkCol=col; styleTooltip(l, col); }
    else { l.setStyle({color:'#94a3b8', fillColor:'#cbd5e1', fillOpacity:0.6}); l._tkCol=null; styleTooltip(l, null); }
  });
}

function styleTooltip(layer, hex){
  var tip = layer.getTooltip();
  if(!tip) return;
  var el = tip.getElement();
  if(!el && labelsVisible){ try{ layer.openTooltip(); el = layer.getTooltip() && layer.getTooltip().getElement(); }catch(_){} }
  if(!el) return;
  el.classList.add('tk');
  var aBg = Math.max(0, Math.min(1, 0.18 * labelAlphaFactor));
  var aBorder = Math.max(0, Math.min(1, 0.8 * labelAlphaFactor));
  if(hex){
    el.style.background = rgba(hex, aBg);
    el.style.borderColor = rgba(hex, aBorder);
    el.style.color = '#111827';
  } else {
    el.style.background = 'rgba(255,255,255,'+(0.85*labelAlphaFactor)+')';
    el.style.borderColor = 'rgba(17,24,39,'+(0.25*labelAlphaFactor)+')';
    el.style.color = '#111827';
  }
}

function fromCSV(csv){
  try{
    const text = stripBOM(String(csv));
    const wb = XLSX.read(text,{type:'string'});
    const ws = wb.Sheets[wb.SheetNames[0]];
    const rows = XLSX.utils.sheet_to_json(ws,{defval:'',raw:false});
    if(!rows.length) return [];
    const key=function(o,alts){ for(var i=0;i<alts.length;i++){ var k=alts[i]; if(Object.prototype.hasOwnProperty.call(o,k)) return k; } return null; };
    var feats=[];
    for(var i=0;i<rows.length;i++){
      var r=rows[i];
      var pKey=key(r,['postcode','post_code','tk','postalcode','postal_code','POST_CODE','PostCode','code']);
      var laKey=key(r,['lat','latitude','y','Lat','LAT']);
      var loKey=key(r,['lon','lng','longitude','x','Lon','LON']);
      if(!pKey||!laKey||!loKey) continue;
      var pc=String(r[pKey]).trim();
      var la=parseFloat(String(r[laKey]).replace(',','.'));
      var lo=parseFloat(String(r[loKey]).replace(',','.'));
      if(/^\d{4}$/.test(pc)&&isFinite(la)&&isFinite(lo)){
        feats.push({type:'Feature',properties:{postcode:pc},geometry:{type:'Point',coordinates:[lo,la]}});
      }
    }
    return feats;
  } catch(e){ return []; }
}
function toCSV(feats){ var header='postcode,lat,lon\n'; var body=feats.map(function(f){return csvEscape(f.properties.postcode)+','+f.geometry.coordinates[1]+','+f.geometry.coordinates[0];}).join('\n'); return header+body; }

function fromGeoJSON(json){ var gj=(typeof json==='string')?JSON.parse(json):json; if(!gj||!Array.isArray(gj.features)) return []; var feats=[]; var seen=new Set(); for(var i=0;i<gj.features.length;i++){ var f=gj.features[i]||{}; var p=f.properties||{}; var code=p.POST_CODE||p.post_code||p.postcode||p.PostalCode||p.postalCode||p.code||p.tk; if(!code) continue; code=String(code).trim(); if(!/^\d{4}$/.test(code)) continue; var coord=null; if(f.geometry&&f.geometry.type==='Point'){ coord=f.geometry.coordinates; } else { try{ coord=turf.centerOfMass(f).geometry.coordinates; }catch(e){ try{ coord=turf.center(f).geometry.coordinates; }catch(_){ coord=null; } } } if(coord&&Number.isFinite(coord[0])&&Number.isFinite(coord[1])){ if(!seen.has(code)){ feats.push({type:'Feature',properties:{postcode:code},geometry:{type:'Point',coordinates:[coord[0],coord[1]]}}); seen.add(code); } } } return feats; }

function loadFeats(feats){ tkLayer.clearLayers(); tkLayer.addData(feats); tkIndex=new Map(); tkLayer.eachLayer(function(l){ var pc=String(l.feature.properties.postcode); var c=l.getLatLng(); tkIndex.set(pc,L.latLng(c.lat,c.lng)); }); setLabels(labelsVisible); statusDiv.textContent='OK · ΤΚ: '+feats.length; updateSummary(); try{localStorage.setItem('tk_cache_v1', toCSV(feats));}catch(_){ } }

function nearestTK(latlng){ var best=null,bestD=Infinity; tkLayer.eachLayer(function(l){ var d=map.distance(latlng,l.getLatLng()); if(d<bestD){bestD=d;best=l;} }); return best?String(best.feature.properties.postcode):null; }

function updateSummary(){
  var pts=registry.map(function(r){ return {id:r.id,lat:r.m.getLatLng().lat,lon:r.m.getLatLng().lng,name:r.name||('Marker #'+r.id)}; });
  var assignByMarker=new Map(); registry.forEach(function(r){assignByMarker.set(r.id,[])});
  var assignedTo=new Map();
  var unassigned=[];
  tkLayer.eachLayer(function(l){ var pc=String(l.feature.properties.postcode); var c=l.getLatLng(); var best={id:null,d:Infinity}; for(var i=0;i<pts.length;i++){ var p=pts[i]; var d=map.distance(c,L.latLng(p.lat,p.lon)); if(d<best.d){best={id:p.id,d:d}} } if(best.id!=null && radiusOk(best.d)){ assignByMarker.get(best.id).push(pc); assignedTo.set(pc,best.id); } else { unassigned.push(pc); } });
  var totalAssigned=0; assignByMarker.forEach(function(v){ totalAssigned+=v.length; });
  summaryDiv.textContent='Κατανεμημένοι: '+totalAssigned+' · Εκτός ακτίνας: '+unassigned.length+' · Markers: '+registry.length+(assignmentRadiusKm>0?(' · Ακτίνα: '+assignmentRadiusKm+' km'):'');
  unassignedDiv.innerHTML = unassigned.length ? unassigned.sort().map(function(pc){return '<span class="chip">'+pc+'</span>';}).join(' ') : '<span class="muted">—</span>';
  recolorPostcodes(assignedTo);
  markersDiv.innerHTML='';
  for(var i=0;i<registry.length;i++){
    var r=registry[i];
    var here=nearestTK(r.m.getLatLng())||'—';
    var pcs=assignByMarker.get(r.id)||[];
    var col=markerColorByIdx(i);
    var card=document.createElement('div');
    var cardBg = rgba(col,0.06);
    var chipBg = rgba(col,0.12);
    var chipBorder = rgba(col,0.35);
    card.style.border = '1px solid #e5e7eb';
    card.style.borderLeft = '6px solid '+col;
    card.style.borderRadius = '10px';
    card.style.padding = '8px';
    card.style.margin = '8px 0';
    card.style.background = cardBg;
    card.innerHTML=
      '<div style="display:flex;justify-content:space-between;align-items:center;gap:8px">'
      +'<div style="display:flex;align-items:center;gap:6px">'
      +'<span style="display:inline-block;width:10px;height:10px;border-radius:9999px;background:'+col+';border:1px solid #111"></span>'
      +'<strong>#'+r.id+'</strong>'
      +'<input data-id="'+r.id+'" class="mname" value="'+(r.name||'')+'" placeholder="όνομα" style="width:160px;padding:6px;border:1px solid #e5e7eb;border-radius:8px" />'
      +'</div>'
      +'<div>'
      +'<button data-id="'+r.id+'" class="toggle" style="background:'+col+'">'+(r.labelShown?'Hide':'Show')+'</button>'
      +'<button data-id="'+r.id+'" class="rm" style="background:#e5e7eb;color:#111">✖︎</button>'
      +'</div>'
      +'</div>'
      +'<div class="muted">'+r.m.getLatLng().lat.toFixed(5)+', '+r.m.getLatLng().lng.toFixed(5)+' · Κάτω από marker τώρα: '+here+'</div>'
      +'<div style="font-size:12px;margin-top:6px;max-height:200px;overflow:auto">'
      +'<strong>ΤΚ ('+pcs.length+')</strong>:'
      +(pcs.length?('<div class="chips">'+pcs.map(function(pc){return '<span class="chip" style="background:'+chipBg+';border-color:'+chipBorder+';color:'+col+'">'+pc+'</span>'}).join(' ')+'</div>'):' — ')
      +'</div>';
    markersDiv.appendChild(card);
  }
  Array.from(markersDiv.querySelectorAll('.rm')).forEach(function(btn){btn.addEventListener('click',function(){ var id=+btn.getAttribute('data-id'); var idx=registry.findIndex(function(x){return x.id===id}); if(idx>-1){markersLayer.removeLayer(registry[idx].m); registry.splice(idx,1); refreshMarkerIcons(); refreshRings(); updateSummary();}})});
  Array.from(markersDiv.querySelectorAll('.mname')).forEach(function(inp){inp.addEventListener('input',function(){ var id=+inp.getAttribute('data-id'); var r=registry.find(function(x){return x.id===id}); if(r){r.name=inp.value; if(r.tooltip){r.tooltip.setContent(inp.value||('Marker #'+r.id));}} try{localStorage.setItem('markers_v1',JSON.stringify(registry.map(function(r){return {id:r.id,lat:r.m.getLatLng().lat,lon:r.m.getLatLng().lng,name:r.name||'',labelShown:!!r.labelShown}})))}catch(_){}})});
  Array.from(markersDiv.querySelectorAll('.toggle')).forEach(function(btn){btn.addEventListener('click',function(){ var id=+btn.getAttribute('data-id'); var r=registry.find(function(x){return x.id===id}); if(!r) return; r.labelShown=!r.labelShown; if(r.labelShown){ if(!r.tooltip){ r.tooltip=r.m.bindTooltip(r.name||('Marker #'+r.id),{permanent:true,offset:[0,-24],direction:'top'}).openTooltip(); } else { r.tooltip.setContent(r.name||('Marker #'+r.id)); r.tooltip.openTooltip(); } } else { if(r.tooltip){ r.m.unbindTooltip(); r.tooltip=null; } } updateSummary(); })});
  try{localStorage.setItem('markers_v1',JSON.stringify(registry.map(function(r){return {id:r.id,lat:r.m.getLatLng().lat,lon:r.m.getLatLng().lng,name:r.name||'',labelShown:!!r.labelShown}})))}catch(_){ }
}

function exportRows(){ var rows=[]; if(!registry.length) return rows; var pts=registry.map(function(r){return {id:r.id,lat:r.m.getLatLng().lat,lon:r.m.getLatLng().lng,name:r.name||('Marker #'+r.id)}}); tkLayer.eachLayer(function(l){ var pc=String(l.feature.properties.postcode); var c=l.getLatLng(); var best={id:null,d:Infinity}; for(var i=0;i<pts.length;i++){ var p=pts[i]; var d=map.distance(c,L.latLng(p.lat,p.lon)); if(d<best.d){best={id:p.id,d:d}} } if(best.id!=null && radiusOk(best.d)){ var m=pts.find(function(x){return x.id===best.id}); rows.push({postcode:pc,marker_id:best.id,marker_name:m?m.name:('Marker #'+best.id)}); } }); return rows; }

function downloadCSV(name,rows){ var header='postcode,marker_id,marker_name\n'; var body=rows.map(function(r){return csvEscape(r.postcode)+','+r.marker_id+','+csvEscape(r.marker_name||'')}).join('\n'); var blob=new Blob([header+body],{type:'text/csv;charset=utf-8;'}); var a=document.createElement('a'); a.href=URL.createObjectURL(blob); a.download=name; a.click(); }
function writeXLSX(name,rows){ var wb=XLSX.utils.book_new(); var ws=XLSX.utils.json_to_sheet(rows); XLSX.utils.book_append_sheet(wb,ws,'Assignments'); XLSX.writeFile(wb,name); }

async function geocode(q){ var u='https://nominatim.openstreetmap.org/search?format=jsonv2&countrycodes=cy&limit=5&q='+encodeURIComponent(q); try{ var r=await fetch(u,{headers:{'Accept-Language':'el,en'}}); if(!r.ok) throw 0; var arr=await r.json(); return arr.map(function(o,i){return {id:'a'+i,label:o.display_name,latlng:L.latLng(parseFloat(o.lat),parseFloat(o.lon)),zoom:16,marker:true}}); }catch(e){ return []; } }
function searchTK(q){ var val=String(q).trim(); var items=[]; if(/^\d{4}$/.test(val)&&tkIndex.has(val)){ items.push({id:'p-'+val,label:'ΤΚ '+val,latlng:tkIndex.get(val),zoom:15,marker:true}); } tkIndex.forEach(function(v,k){ if(String(k).startsWith(val)&&String(k)!==val) items.push({id:'p-'+k,label:'ΤΚ '+k,latlng:v,zoom:15,marker:true}); }); return items.slice(0,10); }
function renderResults(items){ if(!items.length){searchResults.innerHTML='<span class="muted">—</span>';return} var html=''; for(var i=0;i<items.length;i++){ var it=items[i]; html+='<div class="item" data-id="'+it.id+'" style="cursor:pointer">'+it.label+'</div>'; } searchResults.innerHTML=html; Array.from(searchResults.children).forEach(function(div){div.addEventListener('click',function(){ var id=div.getAttribute('data-id'); var it=items.find(function(x){return String(x.id)===String(id)}); if(!it)return; map.setView(it.latlng,it.zoom||15); if(it.marker){searchLayer.clearLayers(); L.marker(it.latlng).addTo(searchLayer).bindPopup(it.label).openPopup()} })}) }
async function handleSearch(){ var q=searchInput.value.trim(); if(!q){searchResults.innerHTML='';return} if(/^[0-9]{3,5}$/.test(q)){ var items=searchTK(q); renderResults(items); if(items.length){ map.setView(items[0].latlng,items[0].zoom||15); searchLayer.clearLayers(); L.marker(items[0].latlng).addTo(searchLayer).bindPopup(items[0].label).openPopup() } return } var items2=await geocode(q); renderResults(items2); if(items2.length){ map.setView(items2[0].latlng,items2[0].zoom||16); searchLayer.clearLayers(); L.marker(items2[0].latlng).addTo(searchLayer).bindPopup(items2[0].label).openPopup() } }

const OFFLINE_CSV='postcode,lat,lon\n1010,35.1700,33.3600\n1020,35.1700,33.3700\n1030,35.1500,33.3700\n1040,35.1560,33.3650\n1055,35.1700,33.3400\n1060,35.1800,33.3600\n1070,35.1700,33.3800\n1080,35.1900,33.3500';
function loadOffline(){ var feats=fromCSV(OFFLINE_CSV); loadFeats(feats); }

// —— Κουμπιά / Χειριστές ——
addMarkerBtn.onclick=function(){ addMode=!addMode; addMarkerBtn.textContent=addMode?'Κλικ στον χάρτη':'Προσθήκη Marker' };
reassignBtn.onclick=function(){ updateSummary(); };
exportCsvBtn.onclick=function(){ var rows=exportRows(); if(!rows.length){alert('Βάλε marker.');return} downloadCSV('postcode_partition.csv',rows) };
exportXlsxBtn.onclick=function(){ var rows=exportRows(); if(!rows.length){alert('Βάλε marker.');return} writeXLSX('postcode_partition.xlsx',rows) };
toggleLabelsBtn.onclick=function(){ labelsVisible=!labelsVisible; setLabels(labelsVisible); tkLayer.eachLayer(function(l){ styleTooltip(l, l._tkCol || null); }); };
fitBtn.onclick=function(){ var b=L.featureGroup(); tkLayer.eachLayer(function(l){b.addLayer(l)}); if(b.getLayers().length){ map.fitBounds(b.getBounds().pad(0.1)) } };
applyRadiusBtn.onclick=function(){ var v=parseFloat(radiusInput.value); assignmentRadiusKm=(Number.isFinite(v)&&v>=0)?v:0; refreshRings(); updateSummary(); };
clearRadiusBtn.onclick=function(){ assignmentRadiusKm=0; radiusInput.value=''; refreshRings(); updateSummary(); };
toggleRingsBtn.onclick=function(){ showRings=!showRings; refreshRings(); };
labelAlpha.oninput=function(){
  var val=parseFloat(labelAlpha.value);
  if(!Number.isFinite(val)) val = 1;
  if(val < 0) val = 0; if(val > 1) val = 1;
  labelAlphaFactor = val;
  labelAlphaVal.textContent = Math.round(val*100)+'%';
  tkLayer.eachLayer(function(l){ styleTooltip(l, l._tkCol || null); });
};

map.on('click',function(e){ if(!addMode) return; var color=markerColorByIdx(registry.length); var m=L.marker(e.latlng,{draggable:true,icon:buildDivIcon(color)}).addTo(markersLayer); m.on('dragend',function(){ refreshRings(); updateSummary(); }); var entry={id:nextId++,m:m,name:'',labelShown:true,tooltip:null}; entry.tooltip=m.bindTooltip('Marker #'+entry.id,{permanent:true,offset:[0,-24],direction:'top'}).openTooltip(); registry.push(entry); addMode=false; addMarkerBtn.textContent='Προσθήκη Marker'; refreshMarkerIcons(); refreshRings(); updateSummary(); });

importBtn.onclick=function(){ fileInput.click() };
clearCacheBtn.onclick=function(){ localStorage.removeItem('tk_cache_v1'); localStorage.removeItem('markers_v1'); statusDiv.textContent='Cache καθαρίστηκε' };
fileInput.onchange=function(){ var f=fileInput.files&&fileInput.files[0]; if(!f)return; var reader=new FileReader(); reader.onload=function(){ try{ var text=String(reader.result); var feats=[]; if(/\{\s*"type"\s*:\s*"FeatureCollection"/i.test(text)||/\.geojson$/i.test(f.name)||/\.json$/i.test(f.name)){ feats=fromGeoJSON(text) } else { feats=fromCSV(text) } if(!feats.length) throw new Error('Άδειο/ασύμβατο αρχείο'); loadFeats(feats); statusDiv.textContent='OK · Offline (εισαγωγή)'; }catch(e){ statusDiv.textContent='Σφάλμα εισαγωγής: '+(e&&e.message?e.message:'') } }; reader.readAsText(f) };

searchBtn.onclick=function(){ handleSearch() };
searchInput.addEventListener('keydown',function(e){ if(e.key==='Enter'){ e.preventDefault(); handleSearch(); } });
clearSearchBtn.onclick=function(){ searchInput.value=''; searchResults.innerHTML=''; searchLayer.clearLayers() };

function parsePostcodeList(text){ var found=String(text||'').match(/\b\d{4}\b/g)||[]; var set=new Set(found); return Array.from(set).sort() }
async function geocodeOne(pc){ var u='https://nominatim.openstreetmap.org/search?format=jsonv2&country=Cyprus&postalcode='+encodeURIComponent(pc)+'&limit=1'; var r=await fetch(u,{headers:{'Accept-Language':'el,en'}}); if(!r.ok) throw new Error('net'); var arr=await r.json(); if(!Array.isArray(arr)||!arr.length) throw new Error('notfound'); var a=arr[0]; var lat=parseFloat(a.lat),lon=parseFloat(a.lon); if(!Number.isFinite(lat)||!Number.isFinite(lon)) throw new Error('coords'); return {pc:pc,lat:lat,lon:lon} }
async function geocodeList(postcodes){ var feats=[]; for(var i=0;i<postcodes.length;i++){ var pc=postcodes[i]; statusDiv.textContent='Γεωκωδικοποίηση '+pc+' ('+(i+1)+'/'+postcodes.length+')'; try{ var one=await geocodeOne(pc); feats.push({type:'Feature',properties:{postcode:String(one.pc)},geometry:{type:'Point',coordinates:[one.lon,one.lat]}}) }catch(e){} await new Promise(function(res){return setTimeout(res,1100)}); } return feats }

pasteListBtn.onclick=function(){ pasteBox.style.display=pasteBox.style.display==='none'?'flex':'none' };
geocodeListBtn.onclick=async function(){ var list=parsePostcodeList(pasteArea.value); if(!list.length){alert('Δεν βρέθηκαν 4ψήφιοι ΤΚ στη λίστα.');return} geocodeListBtn.disabled=true; try{ var feats=await geocodeList(list); if(!feats.length){ statusDiv.textContent='Δεν βρέθηκαν συντεταγμένες για τη λίστα.' } else { loadFeats(feats); statusDiv.textContent='OK · Geocoded '+feats.length+' ΤΚ' } } finally { geocodeListBtn.disabled=false } };

function getAllFeats(){ var feats=[]; tkLayer.eachLayer(function(l){ var pc=String(l.feature.properties.postcode); var c=l.getLatLng(); feats.push({type:'Feature',properties:{postcode:pc},geometry:{type:'Point',coordinates:[c.lng,c.lat]}}) }); return feats }
function rebuildIndex(){ tkIndex=new Map(); tkLayer.eachLayer(function(l){ var pc=String(l.feature.properties.postcode); var c=l.getLatLng(); tkIndex.set(pc,L.latLng(c.lat,c.lng)) }) }
function upsertPostcode(pc,lat,lon){ if(!/^\d{4}$/.test(String(pc))) throw new Error('Άκυρος ΤΚ'); if(!Number.isFinite(lat)||!Number.isFinite(lon)) throw new Error('Άκυρες συντεταγμένες'); var target=null; tkLayer.eachLayer(function(l){ if(!target&&String(l.feature.properties.postcode)===String(pc)) target=l }); if(target){ target.setLatLng([lat,lon]) } else { tkLayer.addData({type:'Feature',properties:{postcode:String(pc)},geometry:{type:'Point',coordinates:[lon,lat]}}) } rebuildIndex(); setLabels(labelsVisible); try{localStorage.setItem('tk_cache_v1', toCSV(getAllFeats()))}catch(_){ } statusDiv.textContent='OK · ενημερώθηκε ο ΤΚ '+pc }
let qePickMode=false; const mapClickHandler=function(e){ if(!qePickMode)return; qeLat.value=e.latlng.lat.toFixed(6); qeLon.value=e.latlng.lng.toFixed(6); qePickMode=false; statusDiv.textContent='Έτοιμο: συμπληρώθηκαν lat/lon από χάρτη' };
qePick.onclick=function(){ qePickMode=!qePickMode; statusDiv.textContent=qePickMode?'Κάνε κλικ στον χάρτη για lat/lon…':'Pick ακυρώθηκε' };
qeApply.onclick=function(){ var pc=qePostcode.value.trim(); var lat=parseFloat(qeLat.value); var lon=parseFloat(qeLon.value); try{ upsertPostcode(pc,lat,lon) }catch(e){ alert(e.message||'Σφάλμα'); return } };
map.on('click',mapClickHandler);

function downloadJSON(name,obj){ var blob=new Blob([JSON.stringify(obj)],{type:'application/json'}); var a=document.createElement('a'); a.href=URL.createObjectURL(blob); a.download=name; a.click() }
saveStateBtn.onclick=function(){ var state={version:APP_VERSION,labelsVisible:labelsVisible,tk_csv:toCSV(getAllFeats()),markers:registry.map(function(r){return {id:r.id,lat:r.m.getLatLng().lat,lon:r.m.getLatLng().lng,name:r.name||'',labelShown:!!r.labelShown}}),assignmentRadiusKm:assignmentRadiusKm,showRings:showRings}; downloadJSON('tk_state.json',state); statusDiv.textContent='Αποθηκεύτηκε η κατάσταση (json)' };
loadStateBtn.onclick=async function(){ try{ var r=await fetch('./state.json',{cache:'no-store'}); if(r.ok){ var st=await r.json(); await loadStateObject(st); return } }catch(_){ } var inp=document.createElement('input'); inp.type='file'; inp.accept='.json'; inp.onchange=function(){ var f=inp.files&&inp.files[0]; if(!f)return; var reader=new FileReader(); reader.onload=async function(){ try{ var st=JSON.parse(String(reader.result)); await loadStateObject(st) }catch(e){ alert('Κατεστραμμένο JSON') } }; reader.readAsText(f) }; inp.click() };
async function loadStateObject(st){
  if(!st||!st.tk_csv) throw new Error('missing tk_csv');
  var feats=fromCSV(st.tk_csv);
  loadFeats(feats);
  labelsVisible=!!st.labelsVisible;
  setLabels(labelsVisible);
  markersLayer.clearLayers();
  ringsLayer.clearLayers();
  registry=[]; nextId=1;
  (st.markers||[]).forEach(function(m,i){
    var color=markerColorByIdx(i);
    var mark=L.marker([m.lat,m.lon],{draggable:true,icon:buildDivIcon(color)}).addTo(markersLayer);
    mark.on('dragend',function(){ refreshRings(); updateSummary(); });
    var entry={id:nextId++,m:mark,name:m.name||'',labelShown:!!m.labelShown,tooltip:null};
    if(entry.labelShown){ entry.tooltip=mark.bindTooltip(entry.name||('Marker #'+entry.id),{permanent:true,offset:[0,-24],direction:'top'}).openTooltip(); }
    registry.push(entry)
  });
  assignmentRadiusKm=Number.isFinite(st.assignmentRadiusKm)?st.assignmentRadiusKm:0;
  showRings=!!st.showRings;
  if(assignmentRadiusKm>0){ radiusInput.value=String(assignmentRadiusKm) }
  refreshMarkerIcons();
  refreshRings();
  updateSummary();
  try{ map.invalidateSize(); }catch(_){}
  statusDiv.textContent='OK · Φορτώθηκε κατάσταση'
}

function b64(str){ return btoa(unescape(encodeURIComponent(str))) }
function saveGhSettings(){ try{localStorage.setItem('gh_cfg',JSON.stringify({o:ghOwner.value||'',r:ghRepo.value||'',b:ghBranch.value||'main',p:ghPath.value||'state.json'}))}catch(_){ } }
function loadGhSettings(){ try{var v=JSON.parse(localStorage.getItem('gh_cfg')||'null'); if(v){ghOwner.value=v.o||'';ghRepo.value=v.r||'';ghBranch.value=v.b||'main';ghPath.value=v.p||'state.json'}}catch(_){ } }
async function ghGet(o,r,p,b){ var u=`https://api.github.com/repos/${encodeURIComponent(o)}/${encodeURIComponent(r)}/contents/${p}?ref=${encodeURIComponent(b||'main')}`; var res=await fetch(u,{headers:{'Accept':'application/vnd.github+json'}}); if(res.status===404)return null; if(!res.ok)throw new Error('GH get failed'); return res.json() }
async function ghPut(o,r,p,b,token,content,msg,sha){ var u=`https://api.github.com/repos/${encodeURIComponent(o)}/${encodeURIComponent(r)}/contents/${p}`; var body={message:(msg||'Update state.json'),content:b64(content),branch:(b||'main')}; if(sha) body.sha=sha; var res=await fetch(u,{method:'PUT',headers:{'Accept':'application/vnd.github+json','Authorization':`Bearer ${token}`},body:JSON.stringify(body)}); if(!res.ok)throw new Error('GH put failed'); return res.json() }
function currentStateString(){ var state={version:APP_VERSION,labelsVisible:labelsVisible,tk_csv:toCSV(getAllFeats()),markers:registry.map(function(r){return {id:r.id,lat:r.m.getLatLng().lat,lon:r.m.getLatLng().lng,name:r.name||'',labelShown:!!r.labelShown}}),assignmentRadiusKm:assignmentRadiusKm,showRings:showRings}; return JSON.stringify(state) }

ghSaveBtn.onclick=async function(){ var o=ghOwner.value.trim(),r=ghRepo.value.trim(),b=(ghBranch.value.trim()||'main'),p=(ghPath.value.trim()||'state.json'),t=ghToken.value.trim(); if(!o||!r||!t){alert('Συμπλήρωσε owner, repo, token.');return} saveGhSettings(); statusDiv.textContent='GitHub: αποθήκευση…'; try{ var sha=null; var meta=await ghGet(o,r,p,b); if(meta&&meta.sha) sha=meta.sha; var payload=currentStateString(); await ghPut(o,r,p,b,t,payload,'TK Finder: save state',sha); statusDiv.textContent='OK · Αποθηκεύτηκε στο GitHub ('+o+'/'+r+':'+p+')' }catch(e){ statusDiv.textContent='Σφάλμα GitHub save' } };

ghLoadBtn.onclick=async function(){ var o=ghOwner.value.trim(),r=ghRepo.value.trim(),b=(ghBranch.value.trim()||'main'),p=(ghPath.value.trim()||'state.json'); if(!o||!r){alert('Συμπλήρωσε owner, repo.');return} saveGhSettings(); statusDiv.textContent='GitHub: φόρτωση…'; try{ var meta=await ghGet(o,r,p,b); if(!meta||!meta.download_url) throw new Error('not found'); var r2=await fetch(meta.download_url,{cache:'no-store'}); var st=await r2.json(); await loadStateObject(st); statusDiv.textContent='OK · Φορτώθηκε από GitHub' }catch(e){ statusDiv.textContent='Σφάλμα GitHub load' } };

loadGhSettings();
(async function init(){ try{ var r=await fetch('./state.json',{cache:'no-store'}); if(r.ok){ var st=await r.json(); await loadStateObject(st); return } }catch(_){ } var cached=localStorage.getItem('tk_cache_v1'); if(cached){ try{ var feats=fromCSV(cached); if(feats.length){ loadFeats(feats); statusDiv.textContent='OK · Cache' } else { throw 0 } }catch(_){ statusDiv.textContent='Offline μέχρι να γίνει εισαγωγή ή γεωκωδικοποίηση.'; loadOffline() } } else { statusDiv.textContent='Offline μέχρι να γίνει εισαγωγή ή γεωκωδικοποίηση.'; loadOffline() } try{ var saved=JSON.parse(localStorage.getItem('markers_v1')||'[]'); if(Array.isArray(saved)&&saved.length){ registry=[]; nextId=1; saved.forEach(function(m,i){ var color=markerColorByIdx(i); var mark=L.marker([m.lat,m.lon],{draggable:true,icon:buildDivIcon(color)}).addTo(markersLayer); mark.on('dragend',function(){ refreshRings(); updateSummary(); }); var entry={id:nextId++,m:mark,name:m.name||'',labelShown:!!m.labelShown,tooltip:null}; if(entry.labelShown){ entry.tooltip=mark.bindTooltip(entry.name||('Marker #'+entry.id),{permanent:true,offset:[0,-24],direction:'top'}).openTooltip() } registry.push(entry) }); updateSummary(); refreshMarkerIcons(); refreshRings(); } }catch(_){ } setTimeout(function(){ try{ map.invalidateSize(); }catch(_){}} , 0); })();

// —— Tests (υπάρχοντα + νέα) ——
(function runTests(){
  try{
    console.assert(fromCSV('postcode,lat,lon\n1234,35.1,33.1').length===1,'CSV basic');
    var feats=[{type:'Feature',properties:{postcode:'1234'},geometry:{type:'Point',coordinates:[33.1,35.1]}}];
    var csv=toCSV(feats);
    console.assert(/1234,35\.1,33\.1/.test(csv),'toCSV');
    var gj={type:'FeatureCollection',features:[{type:'Feature',properties:{POST_CODE:1234},geometry:{type:'Polygon',coordinates:[[[33,35],[33.2,35],[33.2,35.2],[33,35.2],[33,35]]]}}]};
    console.assert(fromGeoJSON(gj).length===1,'GeoJSON centroid');
    var gj2={type:'FeatureCollection',features:[{type:'Feature',properties:{postcode:'5678'},geometry:{type:'Point',coordinates:[33.4,35.2]}}]};
    console.assert(fromGeoJSON(gj2).length===1,'GeoJSON point passthrough');
    var csv2='POST_CODE,Lat,Lon\n4321,35,33\n4322,35,33.5\n4323,35,33,5';
    console.assert(fromCSV(csv2).length===2,'CSV headers variants & bad row skipped');
    var bomCsv='\ufeffpostcode,lat,lon\n1111,35.2,33.4';
    console.assert(fromCSV(bomCsv).length===1,'CSV BOM handled');
    var round=toCSV([{type:'Feature',properties:{postcode:'9999'},geometry:{type:'Point',coordinates:[33.9,35.9]}}]);
    var roundBack=fromCSV(round);
    console.assert(roundBack.length===1 && roundBack[0].properties.postcode==='9999','CSV roundtrip');
    assignmentRadiusKm=5;
    console.assert(radiusOk(3000)===true,'radiusOk within 5km');
    console.assert(radiusOk(6000)===false,'radiusOk outside 5km');
    assignmentRadiusKm=0;
    console.assert(radiusOk(123456)===true,'radiusOk unlimited');
    console.assert(markerColorByIdx(0)===PALETTE[0] && markerColorByIdx(PALETTE.length)===PALETTE[0],'palette wrap');
    var rgb=hexToRgb('#0ea5e9');
    console.assert(rgb.r===14&&rgb.g===165&&rgb.b===233,'hexToRgb');
    console.assert(rgba('#0ea5e9',0.5).indexOf('rgba(')===0,'rgba formatter');
  }catch(e){ console.warn('Tests failed', e); }
})();

window.addEventListener('load', function(){
  setTimeout(function(){
    try{ map.invalidateSize(); }catch(_){ }
  }, 0);
});
window.addEventListener('resize', function(){
  try{ map.invalidateSize(); }catch(_){ }
});
</script>
</body>
</html>
